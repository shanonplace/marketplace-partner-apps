// Font Awesome icon extraction utilities

export const extractFontAwesomeIcons = (css: string): string[] => {
  const allIcons = new Set<string>();
  const brandIcons = new Set<string>();
  const solidIcons = new Set<string>();
  const regularIcons = new Set<string>();

  // First, find the Brand Font Family definition
  // Font Awesome typically defines brand icons with a specific font family
  let brandFontFamily = "";
  const brandFontRegex = /\.fa-brands,\s*\.fab\s*{[^}]*font-family:\s*["']([^"']+)["'][^}]*}/i;
  const brandFontMatch = brandFontRegex.exec(css);
  if (brandFontMatch) {
    brandFontFamily = brandFontMatch[1];
    console.log(`Found brand font family: ${brandFontFamily}`);
  }

  // Also look for brand-specific CSS sections
  const brandSectionRegex = /\.fab\s*,\s*\.fa-brands\s*{[^}]*}/g;
  const brandSections = [...css.matchAll(brandSectionRegex)].map(match => match[0]);
  
  // Extract all icon definitions
  // Support both single-colon and double-colon syntax
  const iconRegex = /\.fa-([a-zA-Z0-9-]+)(?:::?before)\s*\{[^}]*content:\s*"\\([a-fA-F0-9]+)"[^}]*\}/g;

  // First pass: collect all icon names
  const allIconNames = new Set<string>();
  let match;
  
  while ((match = iconRegex.exec(css)) !== null) {
    const iconName = match[1];
    
    // Skip utility classes, size classes, etc.
    if (iconName.match(/^(xs|sm|lg|xl|2xl|2xs|fw|border|pull|stack|inverse|spin|pulse|beat|bounce|fade|flip|shake|rotate|[0-9]+x|sr|li|ul)$/)) {
      continue;
    }
    
    allIconNames.add(iconName);
  }
  
  // Second pass: analyze how each icon is used in the CSS to determine its type
  for (const iconName of allIconNames) {
    // Check if this icon is referenced in the brand sections
    const isBrand = brandSections.some(section => 
      section.includes(`.fa-${iconName}`) || 
      css.includes(`.fab.fa-${iconName}`) || 
      css.includes(`.fa-brands.fa-${iconName}`)
    );
    
    if (isBrand) {
      brandIcons.add(iconName);
    } else {
      // If not explicitly a brand, assume it could be both solid and regular
      solidIcons.add(iconName);
      regularIcons.add(iconName);
    }
    
    // Debug logging for specific icons we're looking for
    if (iconName === 'shopify' || iconName === 'github' || iconName === 'apple') {
      console.log(`Found icon: ${iconName}, isBrand: ${isBrand}`);
    }
  }

  // Look for style classes (fas, far, fab) associated with icons
  // to further refine which icons are regular vs solid
  allIconNames.forEach(iconName => {
    // Check if this icon has specific style classes
    if (css.includes(`.fas.fa-${iconName}`) || css.includes(`.fa-solid.fa-${iconName}`)) {
      solidIcons.add(iconName);
    }
    if (css.includes(`.far.fa-${iconName}`) || css.includes(`.fa-regular.fa-${iconName}`)) {
      regularIcons.add(iconName);
    }
  });

  // Brand icons (use fab fa-iconname)
  brandIcons.forEach((iconName) => {
    allIcons.add(`fab fa-${iconName}`);
  });

  // Solid icons (use fas fa-iconname)
  solidIcons.forEach((iconName) => {
    if (!brandIcons.has(iconName)) {
      allIcons.add(`fas fa-${iconName}`);
    }
  });

  // Regular icons (use far fa-iconname)
  regularIcons.forEach((iconName) => {
    if (!brandIcons.has(iconName)) {
      allIcons.add(`far fa-${iconName}`);
    }
  });

  // For backwards compatibility, also add the simple fa class
  // This can help with older Font Awesome versions
  brandIcons.forEach((iconName) => {
    allIcons.add(`fa fa-${iconName}`);
  });
  solidIcons.forEach((iconName) => {
    if (!brandIcons.has(iconName)) {
      allIcons.add(`fa fa-${iconName}`);
    }
  });

  console.log(`Found ${allIcons.size} Font Awesome icons (${brandIcons.size} brands, ${solidIcons.size} solid, ${regularIcons.size} regular)`);
  return Array.from(allIcons).sort();
};

// For backward compatibility
export const extractFontAwesomeIconsFromCSS = (css: string): string[] => {
  return extractFontAwesomeIcons(css);
};

export const cleanIconNameForDisplay = (iconClass: string): string => {
  return iconClass.replace(/^(fa-solid|fa-regular|fa-brands|fa-light|fa-thin|fa-duotone|fas|far|fab)\s+/, '').replace(/^fa-/, '');
};
